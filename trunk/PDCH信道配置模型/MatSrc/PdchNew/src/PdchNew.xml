<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PdchNew</name>
    </assembly>
    <members>
        <member name="T:PdchNew.PdchNewclass">
            <summary>
            The PdchNewclass class provides a CLS compliant interface to the M-functions
            contained in the files:
            <newpara></newpara>
            G:\protocolmining\PDCH信道配置模型\MatSrc\newton.m
            <newpara></newpara>
            G:\protocolmining\PDCH信道配置模型\MatSrc\pdchsim.m
            <newpara></newpara>
            deployprint.m
            <newpara></newpara>
            printdlg.m
            </summary>
            <remarks>
            @Version 0.0
            </remarks>
        </member>
        <member name="M:PdchNew.PdchNewclass.#cctor">
            <summary internal= "true">
            The static constructor instantiates and initializes the MATLAB Component
            Runtime instance.
            </summary>
        </member>
        <member name="M:PdchNew.PdchNewclass.#ctor">
            <summary>
            Constructs a new instance of the PdchNewclass class.
            </summary>
        </member>
        <member name="M:PdchNew.PdchNewclass.Finalize">
            <summary internal= "true">
            Class destructor called by the CLR garbage collector.
            </summary>
        </member>
        <member name="M:PdchNew.PdchNewclass.Dispose">
            <summary>
            Frees the native resources associated with this object
            </summary>
        </member>
        <member name="M:PdchNew.PdchNewclass.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
        </member>
        <member name="M:PdchNew.PdchNewclass.newton">
             <summary>
             Provides a single output, 0-input interface to the newton M-function.
             </summary>
             <remarks>
             M-Documentation:
             [x, y] = newton(A,b,x0,niter);
             solves the linear least squares problem with nonnegative variables using the
             newton's algorithm in [1].
             Input:
             A:      [MxN] matrix 
             b:      [Mx1] vector
             x0:     [Nx1] vector of initial values. x0 > 0. Default value: ones(n,1)
             niter:  Number of iterations. Default value: 10
             Output
             x:      solution
             y:      complementary solution
             [1] Portugal, Judice and Vicente, A comparison of block pivoting and
             interior point algorithms for linear least squares problems with
             nonnegative variables, Mathematics of Computation, 63(1994), pp. 625-643
             Uriel Roque
             02.05.2006
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.newton(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input interface to the newton M-function.
             </summary>
             <remarks>
             M-Documentation:
             [x, y] = newton(A,b,x0,niter);
             solves the linear least squares problem with nonnegative variables using the
             newton's algorithm in [1].
             Input:
             A:      [MxN] matrix 
             b:      [Mx1] vector
             x0:     [Nx1] vector of initial values. x0 > 0. Default value: ones(n,1)
             niter:  Number of iterations. Default value: 10
             Output
             x:      solution
             y:      complementary solution
             [1] Portugal, Judice and Vicente, A comparison of block pivoting and
             interior point algorithms for linear least squares problems with
             nonnegative variables, Mathematics of Computation, 63(1994), pp. 625-643
             Uriel Roque
             02.05.2006
             </remarks>
             <param name="A">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.newton(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input interface to the newton M-function.
             </summary>
             <remarks>
             M-Documentation:
             [x, y] = newton(A,b,x0,niter);
             solves the linear least squares problem with nonnegative variables using the
             newton's algorithm in [1].
             Input:
             A:      [MxN] matrix 
             b:      [Mx1] vector
             x0:     [Nx1] vector of initial values. x0 > 0. Default value: ones(n,1)
             niter:  Number of iterations. Default value: 10
             Output
             x:      solution
             y:      complementary solution
             [1] Portugal, Judice and Vicente, A comparison of block pivoting and
             interior point algorithms for linear least squares problems with
             nonnegative variables, Mathematics of Computation, 63(1994), pp. 625-643
             Uriel Roque
             02.05.2006
             </remarks>
             <param name="A">Input argument #1</param>
             <param name="b">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.newton(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input interface to the newton M-function.
             </summary>
             <remarks>
             M-Documentation:
             [x, y] = newton(A,b,x0,niter);
             solves the linear least squares problem with nonnegative variables using the
             newton's algorithm in [1].
             Input:
             A:      [MxN] matrix 
             b:      [Mx1] vector
             x0:     [Nx1] vector of initial values. x0 > 0. Default value: ones(n,1)
             niter:  Number of iterations. Default value: 10
             Output
             x:      solution
             y:      complementary solution
             [1] Portugal, Judice and Vicente, A comparison of block pivoting and
             interior point algorithms for linear least squares problems with
             nonnegative variables, Mathematics of Computation, 63(1994), pp. 625-643
             Uriel Roque
             02.05.2006
             </remarks>
             <param name="A">Input argument #1</param>
             <param name="b">Input argument #2</param>
             <param name="x0">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.newton(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input interface to the newton M-function.
             </summary>
             <remarks>
             M-Documentation:
             [x, y] = newton(A,b,x0,niter);
             solves the linear least squares problem with nonnegative variables using the
             newton's algorithm in [1].
             Input:
             A:      [MxN] matrix 
             b:      [Mx1] vector
             x0:     [Nx1] vector of initial values. x0 > 0. Default value: ones(n,1)
             niter:  Number of iterations. Default value: 10
             Output
             x:      solution
             y:      complementary solution
             [1] Portugal, Judice and Vicente, A comparison of block pivoting and
             interior point algorithms for linear least squares problems with
             nonnegative variables, Mathematics of Computation, 63(1994), pp. 625-643
             Uriel Roque
             02.05.2006
             </remarks>
             <param name="A">Input argument #1</param>
             <param name="b">Input argument #2</param>
             <param name="x0">Input argument #3</param>
             <param name="niter">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.newton(System.Int32)">
             <summary>
             Provides the standard 0-input interface to the newton M-function.
             </summary>
             <remarks>
             M-Documentation:
             [x, y] = newton(A,b,x0,niter);
             solves the linear least squares problem with nonnegative variables using the
             newton's algorithm in [1].
             Input:
             A:      [MxN] matrix 
             b:      [Mx1] vector
             x0:     [Nx1] vector of initial values. x0 > 0. Default value: ones(n,1)
             niter:  Number of iterations. Default value: 10
             Output
             x:      solution
             y:      complementary solution
             [1] Portugal, Judice and Vicente, A comparison of block pivoting and
             interior point algorithms for linear least squares problems with
             nonnegative variables, Mathematics of Computation, 63(1994), pp. 625-643
             Uriel Roque
             02.05.2006
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.newton(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input interface to the newton M-function.
             </summary>
             <remarks>
             M-Documentation:
             [x, y] = newton(A,b,x0,niter);
             solves the linear least squares problem with nonnegative variables using the
             newton's algorithm in [1].
             Input:
             A:      [MxN] matrix 
             b:      [Mx1] vector
             x0:     [Nx1] vector of initial values. x0 > 0. Default value: ones(n,1)
             niter:  Number of iterations. Default value: 10
             Output
             x:      solution
             y:      complementary solution
             [1] Portugal, Judice and Vicente, A comparison of block pivoting and
             interior point algorithms for linear least squares problems with
             nonnegative variables, Mathematics of Computation, 63(1994), pp. 625-643
             Uriel Roque
             02.05.2006
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="A">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.newton(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input interface to the newton M-function.
             </summary>
             <remarks>
             M-Documentation:
             [x, y] = newton(A,b,x0,niter);
             solves the linear least squares problem with nonnegative variables using the
             newton's algorithm in [1].
             Input:
             A:      [MxN] matrix 
             b:      [Mx1] vector
             x0:     [Nx1] vector of initial values. x0 > 0. Default value: ones(n,1)
             niter:  Number of iterations. Default value: 10
             Output
             x:      solution
             y:      complementary solution
             [1] Portugal, Judice and Vicente, A comparison of block pivoting and
             interior point algorithms for linear least squares problems with
             nonnegative variables, Mathematics of Computation, 63(1994), pp. 625-643
             Uriel Roque
             02.05.2006
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="A">Input argument #1</param>
             <param name="b">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.newton(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input interface to the newton M-function.
             </summary>
             <remarks>
             M-Documentation:
             [x, y] = newton(A,b,x0,niter);
             solves the linear least squares problem with nonnegative variables using the
             newton's algorithm in [1].
             Input:
             A:      [MxN] matrix 
             b:      [Mx1] vector
             x0:     [Nx1] vector of initial values. x0 > 0. Default value: ones(n,1)
             niter:  Number of iterations. Default value: 10
             Output
             x:      solution
             y:      complementary solution
             [1] Portugal, Judice and Vicente, A comparison of block pivoting and
             interior point algorithms for linear least squares problems with
             nonnegative variables, Mathematics of Computation, 63(1994), pp. 625-643
             Uriel Roque
             02.05.2006
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="A">Input argument #1</param>
             <param name="b">Input argument #2</param>
             <param name="x0">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.newton(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input interface to the newton M-function.
             </summary>
             <remarks>
             M-Documentation:
             [x, y] = newton(A,b,x0,niter);
             solves the linear least squares problem with nonnegative variables using the
             newton's algorithm in [1].
             Input:
             A:      [MxN] matrix 
             b:      [Mx1] vector
             x0:     [Nx1] vector of initial values. x0 > 0. Default value: ones(n,1)
             niter:  Number of iterations. Default value: 10
             Output
             x:      solution
             y:      complementary solution
             [1] Portugal, Judice and Vicente, A comparison of block pivoting and
             interior point algorithms for linear least squares problems with
             nonnegative variables, Mathematics of Computation, 63(1994), pp. 625-643
             Uriel Roque
             02.05.2006
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="A">Input argument #1</param>
             <param name="b">Input argument #2</param>
             <param name="x0">Input argument #3</param>
             <param name="niter">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.newton(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the newton function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             [x, y] = newton(A,b,x0,niter);
             solves the linear least squares problem with nonnegative variables using the
             newton's algorithm in [1].
             Input:
             A:      [MxN] matrix 
             b:      [Mx1] vector
             x0:     [Nx1] vector of initial values. x0 > 0. Default value: ones(n,1)
             niter:  Number of iterations. Default value: 10
             Output
             x:      solution
             y:      complementary solution
             [1] Portugal, Judice and Vicente, A comparison of block pivoting and
             interior point algorithms for linear least squares problems with
             nonnegative variables, Mathematics of Computation, 63(1994), pp. 625-643
             Uriel Roque
             02.05.2006
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.pdchsim">
             <summary>
             Provides a single output, 0-input interface to the pdchsim M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.pdchsim(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input interface to the pdchsim M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="traffic">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.pdchsim(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input interface to the pdchsim M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="traffic">Input argument #1</param>
             <param name="pdchuse">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.pdchsim(System.Int32)">
             <summary>
             Provides the standard 0-input interface to the pdchsim M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.pdchsim(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input interface to the pdchsim M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traffic">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.pdchsim(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input interface to the pdchsim M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traffic">Input argument #1</param>
             <param name="pdchuse">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.pdchsim(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the pdchsim function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:PdchNew.PdchNewclass.WaitForFiguresToDie">
             <summary>
             This method will cause a MATLAB figure window to behave as a modal dialog box.
             The method will not return until all the figure windows associated with this
             component have been closed.
             </summary>
             <remarks>
             An application should only call this method when required to keep the
             MATLAB figure window from disappearing.  Other techniques, such as calling
             Console.ReadLine() from the application should be considered where
             possible.</remarks>
            
        </member>
        <member name="T:PdchNew.MCRComponentState">
            <summary>
            The MCR Component State
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_name_data">
            <summary>
            The .NET Builder component name
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_root_data">
            <summary>
            The component root data
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_public_data">
            <summary>
            The public encryption key for the .NET Builder component
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_session_data">
            <summary>
            The session encryption key for the .NET Builder component
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_matlabpath_data">
            <summary>
            The MATLAB path for the .NET Builder component
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_matlabpath_data_count">
            <summary>
            The MATLAB path count
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_classpath_data">
            <summary>
            The class path for the .NET Builder component
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_classpath_data_count">
            <summary>
            The class path count
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_libpath_data">
            <summary>
            The lib path for the .NET Builder component
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_libpath_data_count">
            <summary>
            The lib path count
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_mcr_application_options">
            <summary>
            The MCR application options
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_mcr_application_option_count">
            <summary>
            The MCR application options count
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_mcr_runtime_options">
            <summary>
            The MCR runtime options
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_mcr_runtime_option_count">
            <summary>
            The MCR runtime options count
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_mcr_pref_dir">
            <summary>
            The component preferences directory
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_set_warning_state">
            <summary>
            Runtime warning states
            </summary>
        </member>
        <member name="F:PdchNew.MCRComponentState.MCC_PdchNew_set_warning_state_count">
            <summary>
            Runtime warning state count
            </summary>
        </member>
    </members>
</doc>
